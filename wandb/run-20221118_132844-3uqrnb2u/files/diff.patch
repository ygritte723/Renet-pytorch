diff --git a/common/utils.py b/common/utils.py
index 0ba9ac5..0f53e96 100644
--- a/common/utils.py
+++ b/common/utils.py
@@ -25,7 +25,7 @@ def setup_run(arg_mode='train'):
                    name=args.extra_dir)
 
     if args.dataset == 'miniimagenet':
-        args.num_class = 64
+        args.num_class = 16
     elif args.dataset == 'cub':
         args.num_class = 100
     elif args.dataset == 'fc100':
@@ -38,6 +38,8 @@ def setup_run(arg_mode='train'):
         args.num_class = 130
     elif args.dataset == 'dogs':
         args.num_class = 70
+    elif args.dataset == 'isic':
+        args.num_class = 4
 
     return args
 
@@ -133,8 +135,8 @@ def parse_args(arg_mode):
 
     ''' about dataset '''
     parser.add_argument('-dataset', type=str, default='miniimagenet',
-                        choices=['miniimagenet', 'cub', 'tieredimagenet', 'cifar_fs'])
-    parser.add_argument('-data_dir', type=str, default='datasets', help='dir of datasets')
+                        choices=['miniimagenet', 'cub', 'tieredimagenet', 'cifar_fs', 'isic'])
+    parser.add_argument('-data_dir', default='/root/autodl-tmp', help='dir of datasets')
 
     ''' about training specs '''
     parser.add_argument('-batch', type=int, default=128, help='auxiliary batch size')
@@ -150,7 +152,7 @@ def parse_args(arg_mode):
 
     ''' about few-shot episodes '''
     parser.add_argument('-way', type=int, default=5, metavar='N', help='number of few-shot classes')
-    parser.add_argument('-shot', type=int, default=1, metavar='K', help='number of shots')
+    parser.add_argument('-shot', type=int, default=5, metavar='K', help='number of shots')
     parser.add_argument('-query', type=int, default=15, help='number of query image per class')
     parser.add_argument('-val_episode', type=int, default=200, help='number of validation episode')
     parser.add_argument('-test_episode', type=int, default=2000, help='number of testing episodes after training')
diff --git a/models/cca.py b/models/cca.py
index 1b35a61..36363d7 100644
--- a/models/cca.py
+++ b/models/cca.py
@@ -11,6 +11,7 @@ class CCA(torch.nn.Module):
         nn_modules = list()
 
         for i in range(num_layers):
+            # 1->16->1
             ch_in = 1 if i == 0 else planes[i - 1]
             ch_out = planes[i]
             k_size = kernel_sizes[i]
diff --git a/models/dataloader/data_utils.py b/models/dataloader/data_utils.py
index a29239e..6deecc5 100644
--- a/models/dataloader/data_utils.py
+++ b/models/dataloader/data_utils.py
@@ -12,6 +12,8 @@ def dataset_builder(args):
         from models.dataloader.tiered_imagenet import tieredImageNet as Dataset
     elif args.dataset == 'cifar_fs':
         from models.dataloader.cifar_fs import DatasetLoader as Dataset
+    elif args.dataset == 'isic':
+        from models.dataloader.isic import ISIC as Dataset
     else:
         raise ValueError('Unkown Dataset')
     return Dataset
diff --git a/models/dataloader/mini_imagenet.py b/models/dataloader/mini_imagenet.py
index 8ab819d..a49ac93 100644
--- a/models/dataloader/mini_imagenet.py
+++ b/models/dataloader/mini_imagenet.py
@@ -9,8 +9,8 @@ import numpy as np
 class MiniImageNet(Dataset):
 
     def __init__(self, setname, args, return_path=False):
-        IMAGE_PATH = os.path.join(args.data_dir, 'miniimagenet/images')
-        SPLIT_PATH = os.path.join(args.data_dir, 'miniimagenet/split')
+        IMAGE_PATH = os.path.join(args.data_dir, 'mini_imagenet/processed_images')
+        SPLIT_PATH = os.path.join(args.data_dir, 'mi_split_16')
 
         csv_path = osp.join(SPLIT_PATH, setname + '.csv')
         lines = [x.strip() for x in open(csv_path, 'r').readlines()][1:]
@@ -23,6 +23,7 @@ class MiniImageNet(Dataset):
         self.args = args
 
         for l in lines:
+            #print(l)
             name, wnid = l.split(',')
             path = osp.join(IMAGE_PATH, name)
             if wnid not in self.wnids:
diff --git a/models/dataloader/samplers.py b/models/dataloader/samplers.py
index d7e0304..bffa4d0 100644
--- a/models/dataloader/samplers.py
+++ b/models/dataloader/samplers.py
@@ -5,16 +5,20 @@ import numpy as np
 class CategoriesSampler():
 
     def __init__(self, label, n_batch, n_cls, n_per):
+        # print(label, n_batch, n_cls, n_per)
         self.n_batch = n_batch  # the number of iterations in the dataloader
-        self.n_cls = n_cls
-        self.n_per = n_per
+        self.n_cls = n_cls #2
+        self.n_per = n_per #20
 
         label = np.array(label)  # all data label
+        #print(label)
         self.m_ind = []  # the data index of each class
         for i in range(max(label) + 1):
             ind = np.argwhere(label == i).reshape(-1)  # all data index of this class
             ind = torch.from_numpy(ind)
+            #print(ind)
             self.m_ind.append(ind)
+        # print(self.m_ind)
 
     def __len__(self):
         return self.n_batch
@@ -22,11 +26,15 @@ class CategoriesSampler():
     def __iter__(self):
         for i_batch in range(self.n_batch):
             batch = []
+            # print(len(self.m_ind))
             classes = torch.randperm(len(self.m_ind))[:self.n_cls]  # random sample num_class indices, e.g. 5
+            # print(classes)
             for c in classes:
                 l = self.m_ind[c]  # all data indices of this class
+            
                 pos = torch.randperm(len(l))[:self.n_per]  # sample n_per data index of this class
                 batch.append(l[pos])
+                # print(len(l[pos]))
             batch = torch.stack(batch).t().reshape(-1)
             # .t() transpose,
             # due to it, the label is in the sequence of abcdabcdabcd form after reshape,
diff --git a/models/renet.py b/models/renet.py
index a2eeb34..b6a8814 100644
--- a/models/renet.py
+++ b/models/renet.py
@@ -24,6 +24,7 @@ class RENet(nn.Module):
 
         self.scr_module = self._make_scr_layer(planes=[640, 64, 64, 64, 640])
         self.cca_module = CCA(kernel_sizes=[3, 3], planes=[16, 1])
+        # self.cca_module = CCA(kernel_sizes=[3, 3], planes=[1, 1])
         self.cca_1x1 = nn.Sequential(
             nn.Conv2d(self.encoder_dim, 64, kernel_size=1, bias=False),
             nn.BatchNorm2d(64),
@@ -159,6 +160,7 @@ class RENet(nn.Module):
         return x - x.mean(1).unsqueeze(1)
 
     def encode(self, x, do_gap=True):
+        # ResNet
         x = self.encoder(x)
 
         if self.args.self_method:
diff --git a/scripts/test/cifar_fs_5w1s.sh b/scripts/test/cifar_fs_5w1s.sh
index 8b1546f..489e29a 100644
--- a/scripts/test/cifar_fs_5w1s.sh
+++ b/scripts/test/cifar_fs_5w1s.sh
@@ -1 +1 @@
-python test.py -dataset cifar_fs -gpu 1 -extra_dir renet_iccv21 -temperature_attn 5.0
+python test.py -dataset cifar_fs -gpu 0 -extra_dir renet_iccv21 -temperature_attn 5.0
diff --git a/scripts/test/cifar_fs_5w5s.sh b/scripts/test/cifar_fs_5w5s.sh
index 1b4734c..0a8e383 100644
--- a/scripts/test/cifar_fs_5w5s.sh
+++ b/scripts/test/cifar_fs_5w5s.sh
@@ -1,2 +1,2 @@
-python test.py -dataset cifar_fs -gpu 1 -extra_dir renet_iccv21 -temperature_attn 5.0 -shot 5
+python test.py -dataset cifar_fs -gpu 0 -extra_dir renet_iccv21 -temperature_attn 5.0 -shot 5
 
diff --git a/scripts/test/cub_5w1s.sh b/scripts/test/cub_5w1s.sh
index e7e10a7..32467e6 100644
--- a/scripts/test/cub_5w1s.sh
+++ b/scripts/test/cub_5w1s.sh
@@ -1 +1 @@
-python test.py -dataset cub -gpu 1 -extra_dir renet_iccv21 -temperature_attn 2.0
+python test.py -dataset cub -gpu 0 -extra_dir renet_iccv21 -temperature_attn 2.0
diff --git a/scripts/test/cub_5w5s.sh b/scripts/test/cub_5w5s.sh
index 7183df9..25a4967 100644
--- a/scripts/test/cub_5w5s.sh
+++ b/scripts/test/cub_5w5s.sh
@@ -1 +1 @@
-python test.py -dataset cub -gpu 1 -extra_dir renet_iccv21 -temperature_attn 2.0 -shot 5
+python test.py -dataset cub -gpu 0 -extra_dir renet_iccv21 -temperature_attn 2.0 -shot 5
diff --git a/scripts/test/miniimagenet_5w1s.sh b/scripts/test/miniimagenet_5w1s.sh
index 8741467..dd1fc8a 100644
--- a/scripts/test/miniimagenet_5w1s.sh
+++ b/scripts/test/miniimagenet_5w1s.sh
@@ -1 +1 @@
-python test.py -dataset miniimagenet -gpu 1 -extra_dir renet_iccv21 -temperature_attn 5.0
+python test.py -dataset miniimagenet -gpu 0 -extra_dir renet_iccv21 -temperature_attn 5.0
diff --git a/scripts/test/miniimagenet_5w5s.sh b/scripts/test/miniimagenet_5w5s.sh
index 7e73918..32fecca 100644
--- a/scripts/test/miniimagenet_5w5s.sh
+++ b/scripts/test/miniimagenet_5w5s.sh
@@ -1 +1 @@
-python test.py -dataset miniimagenet -gpu 1 -extra_dir renet_iccv21 -temperature_attn 5.0 -shot 5
+python test.py -dataset miniimagenet -gpu 0 -extra_dir renet_iccv21 -temperature_attn 5.0 -shot 5
diff --git a/scripts/test/tieredimagenet_5w1s.sh b/scripts/test/tieredimagenet_5w1s.sh
index 8550a84..33030b5 100644
--- a/scripts/test/tieredimagenet_5w1s.sh
+++ b/scripts/test/tieredimagenet_5w1s.sh
@@ -1 +1 @@
-python test.py -dataset tieredimagenet -gpu 1 -extra_dir renet_iccv21 -temperature_attn 5.0
+python test.py -dataset tieredimagenet -gpu 0 -extra_dir renet_iccv21 -temperature_attn 5.0
diff --git a/scripts/test/tieredimagenet_5w5s.sh b/scripts/test/tieredimagenet_5w5s.sh
index c51267e..99f44ec 100644
--- a/scripts/test/tieredimagenet_5w5s.sh
+++ b/scripts/test/tieredimagenet_5w5s.sh
@@ -1 +1 @@
-python test.py -dataset tieredimagenet -gpu 1 -extra_dir renet_iccv21 -temperature_attn 5.0 -shot 5
+python test.py -dataset tieredimagenet -gpu 0 -extra_dir renet_iccv21 -temperature_attn 5.0 -shot 5
diff --git a/scripts/train/cifar_fs_5w1s.sh b/scripts/train/cifar_fs_5w1s.sh
index 6c8ca45..ecc2b29 100644
--- a/scripts/train/cifar_fs_5w1s.sh
+++ b/scripts/train/cifar_fs_5w1s.sh
@@ -1 +1 @@
-python train.py -batch 64 -dataset cifar_fs -gpu 1 -extra_dir your_run -temperature_attn 5.0 -lamb 0.5
+python train.py -batch 64 -dataset cifar_fs -gpu 0 -extra_dir your_run -temperature_attn 5.0 -lamb 0.5
diff --git a/scripts/train/cifar_fs_5w5s.sh b/scripts/train/cifar_fs_5w5s.sh
index 87f078c..8e43d68 100644
--- a/scripts/train/cifar_fs_5w5s.sh
+++ b/scripts/train/cifar_fs_5w5s.sh
@@ -1 +1 @@
-python train.py -batch 64 -dataset cifar_fs -gpu 1 -extra_dir your_run -temperature_attn 5.0 -lamb 0.5 -shot 5 -milestones 40 50 -max_epoch 60
+python train.py -batch 64 -dataset cifar_fs -gpu 0 -extra_dir your_run -temperature_attn 5.0 -lamb 0.5 -shot 5 -milestones 40 50 -max_epoch 60
diff --git a/scripts/train/cub_5w1s.sh b/scripts/train/cub_5w1s.sh
index a2d2989..d12278f 100644
--- a/scripts/train/cub_5w1s.sh
+++ b/scripts/train/cub_5w1s.sh
@@ -1 +1 @@
-python train.py -batch 64 -dataset cub -gpu 1 -extra_dir your_run -temperature_attn 2.0 -lamb 1.5
\ No newline at end of file
+python train.py -batch 64 -dataset cub -gpu 0 -extra_dir your_run -temperature_attn 2.0 -lamb 1.5
\ No newline at end of file
diff --git a/scripts/train/cub_5w5s.sh b/scripts/train/cub_5w5s.sh
index 1f73b18..e6e6724 100644
--- a/scripts/train/cub_5w5s.sh
+++ b/scripts/train/cub_5w5s.sh
@@ -1 +1 @@
-python train.py -batch 64 -dataset cub -gpu 1 -extra_dir your_run -temperature_attn 2.0 -lamb 1.5 -shot 5 -milestones 40 50 -max_epoch 60
+python train.py -batch 64 -dataset cub -gpu 0 -extra_dir your_run -temperature_attn 2.0 -lamb 1.5 -shot 5 -milestones 40 50 -max_epoch 60
diff --git a/scripts/train/miniimagenet_5w1s.sh b/scripts/train/miniimagenet_5w1s.sh
index e1b8784..06a5486 100644
--- a/scripts/train/miniimagenet_5w1s.sh
+++ b/scripts/train/miniimagenet_5w1s.sh
@@ -1 +1 @@
-python train.py -batch 128 -dataset miniimagenet -gpu 1 -extra_dir your_run -temperature_attn 5.0 -lamb 0.25
+python train.py -batch 128 -dataset miniimagenet -gpu 0 -extra_dir your_run -temperature_attn 5.0 -lamb 0.25
diff --git a/scripts/train/miniimagenet_5w5s.sh b/scripts/train/miniimagenet_5w5s.sh
index 96d7f55..ccfbb72 100644
--- a/scripts/train/miniimagenet_5w5s.sh
+++ b/scripts/train/miniimagenet_5w5s.sh
@@ -1 +1 @@
-python train.py -batch 128 -dataset miniimagenet -gpu 1 -extra_dir your_run -temperature_attn 5.0 -lamb 0.25 -shot 5 -milestones 40 50 -max_epoch 60
+python train.py -batch 128 -dataset miniimagenet -gpu 0 -extra_dir your_run_16 -temperature_attn 5.0 -lamb 0.25 -shot 5 -milestones 40 50 -max_epoch 60
diff --git a/scripts/train/tieredimagenet_5w1s.sh b/scripts/train/tieredimagenet_5w1s.sh
index 335f2f4..bcee1f4 100644
--- a/scripts/train/tieredimagenet_5w1s.sh
+++ b/scripts/train/tieredimagenet_5w1s.sh
@@ -1 +1 @@
-python train.py -batch 256 -dataset tieredimagenet -gpu 1,0 -extra_dir your_run -temperature_attn 5.0 -lamb 0.25 -milestones 60 80 -max_epoch 100
+python train.py -batch 256 -dataset tieredimagenet -gpu 0,0 -extra_dir your_run -temperature_attn 5.0 -lamb 0.25 -milestones 60 80 -max_epoch 100
diff --git a/scripts/train/tieredimagenet_5w5s.sh b/scripts/train/tieredimagenet_5w5s.sh
index 268cdda..7677086 100644
--- a/scripts/train/tieredimagenet_5w5s.sh
+++ b/scripts/train/tieredimagenet_5w5s.sh
@@ -1,2 +1,2 @@
-python train.py -batch 256 -dataset tieredimagenet -gpu 1,0 -extra_dir your_run -temperature_attn 5.0 -lamb 0.25 -shot 5 -milestones 40 50 -max_epoch 60
+python train.py -batch 256 -dataset tieredimagenet -gpu 0,0 -extra_dir your_run -temperature_attn 5.0 -lamb 0.25 -shot 5 -milestones 40 50 -max_epoch 60
 
diff --git a/train.py b/train.py
index 901470e..7938bba 100644
--- a/train.py
+++ b/train.py
@@ -43,7 +43,9 @@ def train(epoch, model, loader, optimizer, args=None):
 
         # loss for batch
         model.module.mode = 'cca'
+        # k = way*shot
         data_shot, data_query = data[:k], data[k:]
+        # cca: data_shot vs data_query
         logits, absolute_logits = model((data_shot.unsqueeze(0).repeat(args.num_gpu, 1, 1, 1, 1), data_query))
         epi_loss = F.cross_entropy(logits, label)
         absolute_loss = F.cross_entropy(absolute_logits, train_labels[k:])
@@ -54,7 +56,9 @@ def train(epoch, model, loader, optimizer, args=None):
         loss_aux = F.cross_entropy(logits_aux, train_labels_aux)
         loss_aux = loss_aux + absolute_loss
 
+        # lambda
         loss = args.lamb * epi_loss + loss_aux
+        
         acc = compute_accuracy(logits, label)
 
         loss_meter.update(loss.item())
